{"version":3,"file":"static/js/901.381d5bb8.chunk.js","mappings":"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","sources":["Components/NavigationBar.jsx","Components/Tunnel.jsx","Pages/Tunnel.jsx"],"sourcesContent":["import React from 'react';\r\nimport './NavigationBar.css';\r\nimport sparkles from '../Icons/pink-sparkles.png';\r\n\r\nfunction NavigationBar ({jumpAnimation, moveInAnimation}) {\r\n\r\n    const createLetterSpans = (text, delay) => {\r\n        return text.split('').map((letter, index) => (\r\n            letter === ' ' ? \r\n            (<span key={index} className={`nav-letter${jumpAnimation ? 'animate' : ''}`} style={{ animationDelay: `${delay + (index * 0.1) +  1}s` }}>\r\n                &nbsp;\r\n            </span>) :\r\n            (<span key={index} className={`nav-letter${jumpAnimation ? 'animate' : ''}`} style={{ animationDelay: `${delay + (index * 0.1) + 1}s` }}>\r\n                {letter}\r\n            </span>)\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div className={`left-nav-container${moveInAnimation ? 'animate' : ''}`}>\r\n            <div className='top-nav-box'>\r\n                <a href='#/welcome' className='head-text'>\r\n                    {createLetterSpans(\"anyamind\", 2.5)}\r\n                </a>\r\n                <img src={sparkles} className='glitter-on-hover' alt=''></img>\r\n            </div>\r\n            <div className='nav-box'>\r\n                <a href='/#/about' style={{ animationDelay: '5s' }} className='nav-text'>\r\n                    {createLetterSpans(\"about\", 3)}\r\n                </a>\r\n            </div>\r\n            <div className='nav-box'>\r\n                <a href='/#/art' style={{ animationDelay: '8s' }} className='nav-text'>\r\n                    {createLetterSpans(\"art\", 3.5)}\r\n                </a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavigationBar","import { useEffect, useState, useRef, useMemo } from \"react\";\r\nimport \"./Tunnel.css\";\r\n\r\nexport default function TunnelScroll() {\r\n    const [scrollPos, setScrollPos] = useState(0);\r\n    const audioCtxRef = useRef(null);\r\n    const audioBufferRef = useRef(null);\r\n    const lastScrollY = useRef(window.scrollY);\r\n    const chordPlayingRef = useRef(false);\r\n\r\n    const pentatonicRatios = [1, 9 / 8, 5 / 4, 3 / 2, 5 / 3]; // relative to base pitch\r\n    let scaleIndexRef = useRef(0);\r\n    let directionRef = useRef(1);\r\n\r\n    const NUM_ITEMS = 1000;\r\n    const RADIUS = 600;\r\n    const DEPTH = 1500;\r\n\r\n    // Initialize AudioContext once\r\n    useEffect(() => {\r\n        if (!audioCtxRef.current) {\r\n            audioCtxRef.current = new (window.AudioContext || window.webkitAudioContext)();\r\n        }\r\n    }, []);\r\n\r\n    // Load the sample\r\n    useEffect(() => {\r\n        const audioCtx = audioCtxRef.current;\r\n        if (!audioCtx) return;\r\n\r\n        fetch(\"/sparkle.mp3\")\r\n            .then((res) => res.arrayBuffer())\r\n            .then((arrayBuffer) => audioCtx.decodeAudioData(arrayBuffer))\r\n            .then((buffer) => {\r\n                audioBufferRef.current = buffer;\r\n            });\r\n    }, []);\r\n\r\n    // Scroll handler\r\n    useEffect(() => {\r\n        const handleScroll = () => {\r\n            const audioCtx = audioCtxRef.current;\r\n            const buffer = audioBufferRef.current;\r\n            if (!audioCtx || !buffer) return;\r\n\r\n            if (audioCtx.state === \"suspended\") audioCtx.resume();\r\n\r\n            const scrollY = window.scrollY;\r\n            const delta = scrollY - lastScrollY.current;\r\n            lastScrollY.current = scrollY;\r\n\r\n            setScrollPos(scrollY);\r\n\r\n            if (Math.abs(delta) > 0 && !chordPlayingRef.current) {\r\n                chordPlayingRef.current = true;\r\n\r\n                // pick next pentatonic ratio\r\n                let index = scaleIndexRef.current + directionRef.current;\r\n                if (index >= pentatonicRatios.length) {\r\n                    index = pentatonicRatios.length - 2;\r\n                    directionRef.current = -1;\r\n                } else if (index < 0) {\r\n                    index = 1;\r\n                    directionRef.current = 1;\r\n                }\r\n                scaleIndexRef.current = index;\r\n\r\n                const playbackRate = pentatonicRatios[index];\r\n\r\n                playSample(audioCtx, buffer, playbackRate, () => {\r\n                    chordPlayingRef.current = false;\r\n                });\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"scroll\", handleScroll, { passive: true });\r\n        return () => window.removeEventListener(\"scroll\", handleScroll);\r\n    }, []);\r\n\r\n    // Generate emojis\r\n    const getRandomEmoji = () => {\r\n        const ranges = [\r\n            [0x1F600, 0x1F64F],\r\n            [0x1F300, 0x1F5FF],\r\n            [0x1F680, 0x1F6FF],\r\n            [0x1F900, 0x1F9FF],\r\n        ];\r\n        const [start, end] = ranges[Math.floor(Math.random() * ranges.length)];\r\n        return String.fromCodePoint(start + Math.floor(Math.random() * (end - start + 1)));\r\n    };\r\n\r\n    const emojis = useMemo(() => Array.from({ length: NUM_ITEMS }, () => getRandomEmoji()), [NUM_ITEMS]);\r\n\r\n    // Tunnel items\r\n    const items = Array.from({ length: NUM_ITEMS }).map((_, i) => {\r\n        const angle = (i / NUM_ITEMS) * Math.PI * 100;\r\n        const x = Math.cos(angle) * RADIUS;\r\n        const y = Math.sin(angle) * RADIUS / 1.5;\r\n        const zPos = -i * DEPTH + scrollPos * 30;\r\n\r\n        const fadeStart = -50000;\r\n        const fadeEnd = 1000;\r\n        let opacity = 1;\r\n        if (zPos < fadeStart) opacity = 0;\r\n        else if (zPos < 0) opacity = 1 - Math.abs(zPos / fadeStart);\r\n        else if (zPos > 0) opacity = Math.max(0, 1 - zPos / fadeEnd);\r\n\r\n        return (\r\n            <div\r\n                key={i}\r\n                className=\"item\"\r\n                style={{\r\n                    transform: `translateX(${x}px) translateY(${y}px) translateZ(${zPos}px)`,\r\n                    opacity,\r\n                }}\r\n            >\r\n                {emojis[i]}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"viewport\">\r\n            <div className=\"tunnel\">{items}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Play sample at a given playbackRate\r\nfunction playSample(audioCtx, buffer, playbackRate, onEnd) {\r\n    const source = audioCtx.createBufferSource();\r\n    source.buffer = buffer;\r\n    source.playbackRate.setValueAtTime(playbackRate, audioCtx.currentTime);\r\n    source.connect(audioCtx.destination);\r\n    source.start();\r\n    source.stop(audioCtx.currentTime + buffer.duration / playbackRate);\r\n\r\n    setTimeout(onEnd, (buffer.duration / playbackRate) * 1000);\r\n}\r\n","import React, { useState } from 'react';\r\nimport NavigationBar from '../Components/NavigationBar';\r\n\r\nimport Tunnel from '../Components/Tunnel';\r\n\r\nfunction ArtTunnel() {\r\n    return (\r\n        <div>\r\n            <NavigationBar jumpAnimation={false} moveInAnimation={false} />\r\n            <Tunnel />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArtTunnel;\r\n"],"names":["_ref","jumpAnimation","moveInAnimation","createLetterSpans","text","delay","split","map","letter","index","_jsx","className","concat","style","animationDelay","children","_jsxs","href","src","sparkles","alt","TunnelScroll","scrollPos","setScrollPos","useState","audioCtxRef","useRef","audioBufferRef","lastScrollY","window","scrollY","chordPlayingRef","pentatonicRatios","scaleIndexRef","directionRef","NUM_ITEMS","useEffect","current","AudioContext","webkitAudioContext","audioCtx","fetch","then","res","arrayBuffer","decodeAudioData","buffer","handleScroll","state","resume","delta","Math","abs","length","playbackRate","onEnd","source","createBufferSource","setValueAtTime","currentTime","connect","destination","start","stop","duration","setTimeout","playSample","addEventListener","passive","removeEventListener","emojis","useMemo","Array","from","getRandomEmoji","ranges","end","floor","random","String","fromCodePoint","items","_","i","angle","PI","x","cos","y","sin","zPos","fadeStart","opacity","max","transform","NavigationBar","Tunnel"],"sourceRoot":""}